AWSTemplateFormatVersion: 2010-09-09

Description: >-
  Deploy ECS for Jenkins Server.

Resources:

  EfsJenkinsSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: NFS access to Jenkins server
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref JenkinsWebSg
      VpcId:
        Fn::ImportValue: VpcId
      Tags:
        - Key: Name
          Value: sg-efs-jenkins-fargate

  JenkinsLbSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Port 443 access to load balancers
      SecurityGroupIngress:
        - IpProtocol: TCP
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"
      VpcId:
        Fn::ImportValue: VpcId
      Tags:
        - Key: Name
          Value: sg-lb-jenkins-server

  JenkinsWebSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Jenkins App containers
      SecurityGroupIngress:
        - IpProtocol: TCP
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref JenkinsLbSg
      VpcId:
        Fn::ImportValue: VpcId
      Tags:
        - Key: Name
          Value: sg-fargate-app-jenkins

  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: rol-ecs-auto-scaling
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'

  ECSIamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: rol-ecs-jenkins-server
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ecs-tasks.amazonaws.com
          Action:
            - sts:AssumeRole
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
      Path: /
      Policies:
        - PolicyName: "pol-ecs-jenkins-server"
          PolicyDocument:
            Statement:
              - Sid: LogGroupAccess
                Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:CreateLogGroup"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogStreams"
                Resource:
                  - "arn:aws:logs:*:*:*"
                Resource:
                  - "*"
              - Sid: SSMMessages
                Effect: Allow
                Action:
                  - "ssmmessages:CreateControlChannel"
                  - "ssmmessages:CreateDataChannel"
                  - "ssmmessages:OpenControlChannel"
                  - "ssmmessages:OpenDataChannel"
                Resource:
                  - "*"
              - Sid: KmsAccess
                Effect: Allow
                Action:
                  - kms:Decrypt
                Resource:
                  - 'Fn::Join':
                    - ':'
                    - - 'arn:aws:kms'
                      - Ref: 'AWS::Region'
                      - Ref: 'AWS::AccountId'
                      - 'key/alias/aws/ssm'

  EfsJenkinsKMS:
    Type: AWS::KMS::Key
    Properties:
      Description: kms-efs-jenkins
      MultiRegion: true
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Id: key-default-policy
        Statement:
        - Sid: Enable IAM User Permissions
          Effect: Allow
          Principal:
            AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
          Action: kms:*
          Resource: '*'
  EfsJenkinsKMSAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/efs/kms-jenkins
      TargetKeyId:
        Ref: EfsJenkinsKMS
  FileSystemJenkins:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      BackupPolicy:
        Status: ENABLED
      PerformanceMode: generalPurpose
      Encrypted: true
      FileSystemTags:
        - Key: Name
          Value: efs-fargate-jenkins
      KmsKeyId: !Ref EfsJenkinsKMS

  MountTargetJenkinsPrvA:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystemJenkins
      SubnetId:
        Fn::ImportValue: SbnPrivate2a
      SecurityGroups:
      -   !Ref EfsJenkinsSg
  MountTargetJenkinsPrvB:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystemJenkins
      SubnetId:
        Fn::ImportValue: SbnPrivate2b
      SecurityGroups:
      - !Ref EfsJenkinsSg
  AccessPointResource:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref FileSystemJenkins
      PosixUser:
        Uid: '1000'
        Gid: '1000'
      RootDirectory:
        CreationInfo:
          OwnerGid: '1000'
          OwnerUid: '1000'
          Permissions: '755'
        Path: '/jenkins-home'
  JenkinsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/fargate/${AWS::StackName}"
      RetentionInDays: 30

  JenkinsLb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      IpAddressType: ipv4
      Scheme: internet-facing
      Name: alb-jenkins-server
      Subnets:
        - Fn::ImportValue: SbnPublic2a
        - Fn::ImportValue: SbnPublic2b
      SecurityGroups:
        - !Ref JenkinsLbSg
      Tags:
        - Key: Name
          Value: alb-jenkins-server


  JenkinsTg:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId:
        Fn::ImportValue: VpcId
      Name: tg-jenkins-server
      Protocol: HTTP
      Port: 8080
      TargetType: ip
      HealthCheckPath: "/login"
      HealthCheckIntervalSeconds: 300
      HealthCheckTimeoutSeconds: 40
      Tags:
      - Key: name
        Value: tg-jenkins-server

  JenkinsHTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: JenkinsLb
    Properties:
      LoadBalancerArn: !Ref JenkinsLb
      Protocol: HTTPS
      Port: 443
      Port: 443
      SslPolicy: "ELBSecurityPolicy-TLS-1-1-2017-01"
      Certificates:
        - CertificateArn: !Sub arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/{{ Route53.CertificateId }} #your ACM Arn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref JenkinsTg

  JenkinsTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: FileSystemJenkins
    Properties:
      Family: td-jenkins-server
      ExecutionRoleArn: !Ref ECSIamRole
      TaskRoleArn: !Ref ECSIamRole
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 2048
      Memory: 4096
      ContainerDefinitions:
        - Name: jenkins-server
          Image: jenkins/jenkins:jdk11
          Essential: true
          MountPoints:
            -
              SourceVolume: jenkins-home
              ContainerPath: "/var/jenkins_home"
          PortMappings:
            - ContainerPort: 8080
              HostPort: 8080
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "/fargate/${AWS::StackName}"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: jenkins-server
      Volumes:
        - Name: jenkins-home
          EFSVolumeConfiguration:
            fileSystemId: !Ref FileSystemJenkins
            RootDirectory: "/"
            TransitEncryption: "ENABLED"
            AuthorizationConfig:
              AccessPointId: !Ref AccessPointResource
              IAM: "ENABLED"
      Tags:
        - Key: Name
          Value: td-jenkins-server

  JenkinsServerECSService:
    DependsOn:
    - JenkinsHTTPListener
    - FileSystemJenkins
    Type: AWS::ECS::Service
    Properties:
      LaunchType: FARGATE
      Cluster: !ImportValue ECSCluster
      ServiceName: ecs-svc-jenkins-server
      TaskDefinition: !Ref JenkinsTaskDefinition
      DesiredCount: 1
      EnableExecuteCommand: true
      SchedulingStrategy: REPLICA
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      HealthCheckGracePeriodSeconds: 300
      LoadBalancers:
        - TargetGroupArn: !Ref JenkinsTg
          ContainerName: jenkins-server
          ContainerPort: 8080
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !ImportValue SbnPrivate2a
            - !ImportValue SbnPrivate2b
          SecurityGroups:
            - !Ref JenkinsWebSg
          AssignPublicIp: DISABLED
      Tags:
        - Key: Name
          Value: ecs-svc-jenkins-server

  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: "{{ ECS.ASG_MinCapacity }}"
      MaxCapacity: "{{ ECS.ASG_MaxCapacity }}"
      ResourceId: !Join
        - '/'
        - - service
          - !ImportValue ECSCluster
          - !GetAtt JenkinsServerECSService.Name
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt AutoScalingRole.Arn
  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ecs-auto-scaling-jenkins
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        # Keep things at or lower than 50% CPU utilization, for example
        TargetValue: 50


#-----Output-----
Outputs:
  EfsJenkinsKMSAlias:
    Description: 'EFS Jenkins KMS Encryption Key Alias'
    Value:
      Ref: 'EfsJenkinsKMSAlias'
  JenkinsLb:
    Description: 'Jenkins Load Balancer ID'
    Value:
      !GetAtt 'JenkinsLb.CanonicalHostedZoneID'
    Export:
      Name: JenkinsLbCanonicalHostedZoneID
  JenkinsLbDNS:
    Description: 'Jenkins Load Balancer DNS'
    Value:
      !GetAtt 'JenkinsLb.DNSName'
    Export:
      Name: JenkinsLbDNS